services:
# Consumes messages on rabbitmq, produces logs, traces and metrics
  consumer:
    build:
      context: ./MetricsExample
      dockerfile:
        Dockerfile
    hostname: consumer
    restart: always
    environment:
      Example__RabbitPort: 5672
      Example__RabbitHost: rabbitmq
      Example__RabbitExchange: example
      Example__RabbitInputQueue: fruit_queue
      Example__RabbitRoutingKey: fruit_route
      Example__Mode: consumer
      Example__ServiceName: rabbit-consumer
    depends_on:
      rabbitmq:
        condition: service_healthy
      otelcol:
        condition: service_started

# Produces messages on rabbitmq, logs, traces and metrics
  producer:
    build:
      context: ./MetricsExample
      dockerfile:
        Dockerfile
    hostname: producer
    restart: always
    environment:
      Example__RabbitPort: 5672
      Example__RabbitHost: rabbitmq
      Example__RabbitExchange: example
      Example__RabbitOutputQueue: fruit_queue
      Example__RabbitRoutingKey: fruit_route
      Example__Mode: producer
      Example__ProduceIntervalMillis: 200
      Example__ServiceName: rabbit-producer
    depends_on:
      rabbitmq:
        condition: service_healthy
      otelcol:
        condition: service_started

  api:
    build:
      context: ./APIInstrumentation
      dockerfile: Dockerfile
    hostname: api
    restart: always
    environment: 
      ASPNETCORE_URLS: http://+:80
    ports: 
    - 58080:80

# RabbitMq for messaging between producer and consumer
  rabbitmq:
    image: rabbitmq:3.9.22-management-alpine
    hostname: rabbitmq
    ports:
      - 15672:15672
      - 15692:15692
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 2s
      retries: 30
      timeout: 60s

# Collects metrics and traces, forwards to prometheus
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.84.0
    hostname: otelcol
    environment:
      HOSTMETRICS_ROOT_PATH: /hostfs
    ports:
      - 8889:8889
    command: ["--config=/etc/otelcol-config.yml"]    
    volumes:
      - ./otelcol/otelcol-config.yml:/etc/otelcol-config.yml
      - /proc/stat:/hostfs/proc/stat:ro
      - /proc/net:/hostfs/proc/net:ro
    depends_on:
      prometheus:
        condition: service_started
      loki:
        condition: service_started
      tempo:
        condition: service_started

# Timeseries storage for metrics
  prometheus:
    image: prom/prometheus:v2.40.5
    command: [
      "--config.file=/etc/prometheus/prometheus.yml", 
      "--storage.tsdb.path=/prometheus", 
      "--web.console.libraries=/usr/share/prometheus/console_libraries", 
      "--web.console.templates=/usr/share/prometheus/consoles", 
      "--enable-feature=remote-write-receiver"
      ]
    ports:
      - 9090:9090
    volumes:
      - prometheus:/prometheus
      - ./prometheus/config.yml:/etc/prometheus/prometheus.yml

# Visualisation of metrics, logs and traces
  grafana:
    image: grafana/grafana:9.3.1
    ports:
      - 3000:3000
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_NAME: "Main Org."
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_AUTH_BASIC_ENABLED: false
      GF_AUTH_DISABLE_LOGIN_FORM: true
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning/
      - ./grafana/dashboards:/var/lib/grafana/dashboards

# Storage for logs
  loki:
    image: grafana/loki:2.7.1
    command: ["-config.file=/etc/loki/config.yml"]
    ports:
      - 3100:3100
    volumes:
      - loki:/data
      - ./loki/config.yml:/etc/loki/config.yml

# Storage for traces
  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yml" ]
    volumes:
      - ./tempo/config.yml:/etc/tempo.yml
      - tempo:/tmp/tempo
    ports:
      - "4317"  # otlp grpc
      - "4318"  # otlp http

networks:
  default:
    name: observability

volumes:
  prometheus:
  loki:
  tempo:
